import React from 'react';
import { CheckCircle, FileText, Clock, Share2, Download } from 'lucide-react';
import { ShareModal } from './ShareModal';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface ReviewResultProps {
  review: string;
  language: string;
  filename?: string;
  createdAt: string;
  reviewId?: string;
  code?: string;
}

export const ReviewResult: React.FC<ReviewResultProps> = ({
  review,
  language,
  filename,
  createdAt,
  reviewId,
  code,
}) => {
  const [showShareModal, setShowShareModal] = React.useState(false);
  const [downloadingPdf, setDownloadingPdf] = React.useState(false);
  const reviewContentRef = React.useRef<HTMLDivElement>(null);

  const formatMarkdown = (text: string) => {
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-sm">$1</code>')
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>');
  };

  const downloadAsPDF = async () => {
    if (!reviewContentRef.current) return;
    
    setDownloadingPdf(true);
    try {
      // Create a temporary container with better styling for PDF
      const tempContainer = document.createElement('div');
      tempContainer.style.position = 'absolute';
      tempContainer.style.left = '-9999px';
      tempContainer.style.width = '800px';
      tempContainer.style.backgroundColor = 'white';
      tempContainer.style.padding = '40px';
      tempContainer.style.fontFamily = 'Arial, sans-serif';
      tempContainer.style.fontSize = '14px';
      tempContainer.style.lineHeight = '1.6';
      tempContainer.style.color = '#333';
      
      // Create PDF content
      const pdfContent = `
        <div style="margin-bottom: 30px; border-bottom: 2px solid #6366f1; padding-bottom: 20px;">
          <h1 style="color: #6366f1; margin: 0 0 10px 0; font-size: 28px;">CodeScore Report</h1>
          <p style="margin: 0; color: #666; font-size: 16px;">AI-Powered Code Analysis by Arjun Kumbakkara</p>
        </div>
        
        <div style="margin-bottom: 25px;">
          <h2 style="color: #374151; margin: 0 0 15px 0; font-size: 20px;">Review Details</h2>
          <div style="background: #f9fafb; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
            <p style="margin: 5px 0;"><strong>Language:</strong> ${language}</p>
            ${filename ? `<p style="margin: 5px 0;"><strong>File:</strong> ${filename}</p>` : ''}
            <p style="margin: 5px 0;"><strong>Generated:</strong> ${new Date(createdAt).toLocaleString()}</p>
          </div>
        </div>
        
        <div style="margin-bottom: 25px;">
          <h2 style="color: #374151; margin: 0 0 15px 0; font-size: 20px;">Code Analysis & Score</h2>
          <div style="background: #f9fafb; padding: 20px; border-radius: 8px; border-left: 4px solid #6366f1;">
            ${formatMarkdown(review)}
          </div>
        </div>
        
        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 12px;">
          <p>Generated by CodeScore - AI-Powered Code Review Platform</p>
          <p>Created by Arjun Kumbakkara | ${new Date().toLocaleDateString()}</p>
        </div>
      `;
      
      tempContainer.innerHTML = pdfContent;
      document.body.appendChild(tempContainer);
      
      // Generate canvas from the temporary container
      const canvas = await html2canvas(tempContainer, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      });
      
      // Remove temporary container
      document.body.removeChild(tempContainer);
      
      // Create PDF
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210; // A4 width in mm
      const pageHeight = 297; // A4 height in mm
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;
      
      // Add first page
      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
      
      // Add additional pages if needed
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }
      
      // Generate filename
      const fileName = filename 
        ? `CodeScore_${filename.replace(/\.[^/.]+$/, '')}_${new Date().toISOString().split('T')[0]}.pdf`
        : `CodeScore_${language}_${new Date().toISOString().split('T')[0]}.pdf`;
      
      // Download the PDF
      pdf.save(fileName);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    } finally {
      setDownloadingPdf(false);
    }
  };

  return (
    <div ref={reviewContentRef} className="bg-white rounded-2xl shadow-lg p-6 mb-6">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <CheckCircle className="text-green-500 mr-3" size={24} />
          <h3 className="text-xl font-semibold text-gray-900">Code Score Complete</h3>
        </div>
        <div className="flex items-center space-x-4">
          <div className="flex items-center text-sm text-gray-500">
            <Clock size={16} className="mr-1" />
            {new Date(createdAt).toLocaleString()}
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={downloadAsPDF}
              disabled={downloadingPdf}
              className="flex items-center px-3 py-1 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors text-sm disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {downloadingPdf ? (
                <div className="w-3 h-3 border border-green-700 border-t-transparent rounded-full animate-spin mr-1"></div>
              ) : (
                <Download size={14} className="mr-1" />
              )}
              {downloadingPdf ? 'Generating...' : 'PDF'}
            </button>
            {reviewId && code && (
              <button
                onClick={() => setShowShareModal(true)}
                className="flex items-center px-3 py-1 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors text-sm"
              >
                <Share2 size={14} className="mr-1" />
                Share
              </button>
            )}
          </div>
        </div>
      </div>

      <div className="flex items-center mb-4 text-sm text-gray-600">
        <FileText size={16} className="mr-2" />
        <span className="mr-4">Language: {language}</span>
        {filename && <span>File: {filename}</span>}
      </div>

      <div className="prose prose-sm max-w-none">
        <div
          dangerouslySetInnerHTML={{
            __html: `<p>${formatMarkdown(review)}</p>`,
          }}
          className="text-gray-700 leading-relaxed"
        />
      </div>

      {reviewId && code && (
        <ShareModal
          isOpen={showShareModal}
          onClose={() => setShowShareModal(false)}
          reviewId={reviewId}
          reviewData={{
            code,
            review,
            language,
            filename,
            createdAt,
          }}
        />
      )}
    </div>
  );
};